// Text Overflow
//==========================================================================
@mixin text-overflow {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

// Placeholder text color
//==========================================================================
@mixin placeholder($color: $input-color-placeholder) {
	&:-moz-placeholder { color: $color; }           // Firefox 4-18
	&::-moz-placeholder { color: $color; }          // Firefox 19+
	&:-ms-input-placeholder { color: $color; }      // Internet Explorer 10+
	&::-webkit-input-placeholder { color: $color; } // Safari and Chrome
}

// Centering Mixin
//==========================================================================
@mixin center($horizontal: true, $vertical: true) {
	position: absolute;
	@if ($horizontal and $vertical) {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	} @else if ($horizontal) {
		left: 50%;
		transform: translate(-50%, 0);
	} @else if ($vertical) {
		top: 50%;
		transform: translate(0, -50);
	}
}

// Mixin printing a linear-gradient
//==========================================================================
// Convert angle
// @author Chris Eppstein
// @param {Number} $value - Value to convert
// @param {String} $unit - Unit to convert to
// @return {Number} Converted angle
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
						 / nth($conversion-factors, index($convertable-units, unit($value)))
						 * nth($conversion-factors, index($convertable-units, $unit));
	}

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

// Test if `$value` is an angle
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

	@return $is-direction or $is-angle;
}

// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
@function legacy-direction($value) {
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}

	$conversion-map: (
		to top          : bottom,
		to top right    : bottom left,
		to right top    : left bottom,
		to right        : left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom       : top,
		to bottom left  : top right,
		to left bottom  : right top,
		to left         : right,
		to left top     : right bottom,
		to top left     : bottom right
	);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - convert-angle($value, 'deg');
}

// Mixin printing a linear-gradient
// as well as a plain color fallback
// and the `-webkit-` prefixed declaration
// @access public
// @param {String | List | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

// Usage
//--------------------------------------------------------------------------
// .test-1 {
//   @include linear-gradient(#31b7d7, #edac7d);
// }
//
// .test-2 {
//   @include linear-gradient(to right, #e47d7d 0%, #c195d3 50%, #4fb4e8 100%);
// }
//
// .test-3 {
//   @include linear-gradient(42deg, #b58234 0%, #d2b545 50%, #d7c04d 50.01%, #ffffff 100%);
// }

// Yandex Bem
//==========================================================================
$elementSeparator: '__';
$modifierSeparator: '--';

@function containsModifier($selector) {
	$selector: selectorToString($selector);
	@if str-index($selector, $modifierSeparator) {
		@return true;
	} @else {
		@return false;
	}
}

@function selectorToString($selector) {
	$selector: inspect($selector); //cast to string
	$selector: str-slice($selector, 2, -2); //remove brackets
	@return $selector;
}

@function getBlock($selector) {
	$selector: selectorToString($selector);
	$modifierStart: str-index($selector, $modifierSeparator) - 1;
	@return str-slice($selector, 0, $modifierStart);
}

@mixin b($block) {
	.#{$block} {
		@content;
	}
}

@mixin e($element) {
	$selector: &;
	@if containsModifier($selector) {
		$block: getBlock($selector);
		@at-root {
			#{$selector} {
				#{$block+$elementSeparator+$element} {
					@content;
				}
			}
		}
	} @else {
		@at-root {
			#{$selector+$elementSeparator+$element} {
				@content;
			}
		}
	}
}

@mixin m($modifier) {
	@at-root {
		#{&}#{$modifierSeparator+$modifier} {
			@content;
		}
	}
}

// Usage
//--------------------------------------------------------------------------
// @include b(test) {
//   background: red;
//   @include e(element){
//     font-size: 14px;
//       @include m(big) {
//         font-size: 18px;
//       }
//   }
//   @include m(modifier) {
//     color: blue;
//     @include e(subelement) {
//       background: gray;
//     }
//   }
// }
